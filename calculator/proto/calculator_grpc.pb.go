// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SumServiceClient is the client API for SumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SumServiceClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	Prime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (SumService_PrimeClient, error)
	Avg(ctx context.Context, opts ...grpc.CallOption) (SumService_AvgClient, error)
	Max(ctx context.Context, opts ...grpc.CallOption) (SumService_MaxClient, error)
}

type sumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSumServiceClient(cc grpc.ClientConnInterface) SumServiceClient {
	return &sumServiceClient{cc}
}

func (c *sumServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/sum.SumService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sumServiceClient) Prime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (SumService_PrimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SumService_ServiceDesc.Streams[0], "/sum.SumService/Prime", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumServicePrimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SumService_PrimeClient interface {
	Recv() (*SumResponse, error)
	grpc.ClientStream
}

type sumServicePrimeClient struct {
	grpc.ClientStream
}

func (x *sumServicePrimeClient) Recv() (*SumResponse, error) {
	m := new(SumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sumServiceClient) Avg(ctx context.Context, opts ...grpc.CallOption) (SumService_AvgClient, error) {
	stream, err := c.cc.NewStream(ctx, &SumService_ServiceDesc.Streams[1], "/sum.SumService/Avg", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumServiceAvgClient{stream}
	return x, nil
}

type SumService_AvgClient interface {
	Send(*StreamAverageRequest) error
	CloseAndRecv() (*AvgResponse, error)
	grpc.ClientStream
}

type sumServiceAvgClient struct {
	grpc.ClientStream
}

func (x *sumServiceAvgClient) Send(m *StreamAverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sumServiceAvgClient) CloseAndRecv() (*AvgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AvgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sumServiceClient) Max(ctx context.Context, opts ...grpc.CallOption) (SumService_MaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &SumService_ServiceDesc.Streams[2], "/sum.SumService/Max", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumServiceMaxClient{stream}
	return x, nil
}

type SumService_MaxClient interface {
	Send(*MaxRequest) error
	Recv() (*MaxResponse, error)
	grpc.ClientStream
}

type sumServiceMaxClient struct {
	grpc.ClientStream
}

func (x *sumServiceMaxClient) Send(m *MaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sumServiceMaxClient) Recv() (*MaxResponse, error) {
	m := new(MaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SumServiceServer is the server API for SumService service.
// All implementations must embed UnimplementedSumServiceServer
// for forward compatibility
type SumServiceServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	Prime(*PrimeRequest, SumService_PrimeServer) error
	Avg(SumService_AvgServer) error
	Max(SumService_MaxServer) error
	mustEmbedUnimplementedSumServiceServer()
}

// UnimplementedSumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSumServiceServer struct {
}

func (UnimplementedSumServiceServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedSumServiceServer) Prime(*PrimeRequest, SumService_PrimeServer) error {
	return status.Errorf(codes.Unimplemented, "method Prime not implemented")
}
func (UnimplementedSumServiceServer) Avg(SumService_AvgServer) error {
	return status.Errorf(codes.Unimplemented, "method Avg not implemented")
}
func (UnimplementedSumServiceServer) Max(SumService_MaxServer) error {
	return status.Errorf(codes.Unimplemented, "method Max not implemented")
}
func (UnimplementedSumServiceServer) mustEmbedUnimplementedSumServiceServer() {}

// UnsafeSumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SumServiceServer will
// result in compilation errors.
type UnsafeSumServiceServer interface {
	mustEmbedUnimplementedSumServiceServer()
}

func RegisterSumServiceServer(s grpc.ServiceRegistrar, srv SumServiceServer) {
	s.RegisterService(&SumService_ServiceDesc, srv)
}

func _SumService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.SumService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SumService_Prime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SumServiceServer).Prime(m, &sumServicePrimeServer{stream})
}

type SumService_PrimeServer interface {
	Send(*SumResponse) error
	grpc.ServerStream
}

type sumServicePrimeServer struct {
	grpc.ServerStream
}

func (x *sumServicePrimeServer) Send(m *SumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SumService_Avg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SumServiceServer).Avg(&sumServiceAvgServer{stream})
}

type SumService_AvgServer interface {
	SendAndClose(*AvgResponse) error
	Recv() (*StreamAverageRequest, error)
	grpc.ServerStream
}

type sumServiceAvgServer struct {
	grpc.ServerStream
}

func (x *sumServiceAvgServer) SendAndClose(m *AvgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sumServiceAvgServer) Recv() (*StreamAverageRequest, error) {
	m := new(StreamAverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SumService_Max_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SumServiceServer).Max(&sumServiceMaxServer{stream})
}

type SumService_MaxServer interface {
	Send(*MaxResponse) error
	Recv() (*MaxRequest, error)
	grpc.ServerStream
}

type sumServiceMaxServer struct {
	grpc.ServerStream
}

func (x *sumServiceMaxServer) Send(m *MaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sumServiceMaxServer) Recv() (*MaxRequest, error) {
	m := new(MaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SumService_ServiceDesc is the grpc.ServiceDesc for SumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sum.SumService",
	HandlerType: (*SumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _SumService_Sum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Prime",
			Handler:       _SumService_Prime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Avg",
			Handler:       _SumService_Avg_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Max",
			Handler:       _SumService_Max_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
